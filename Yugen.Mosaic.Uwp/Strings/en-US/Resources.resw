<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultDeletePicture" xml:space="preserve">
    <value>Do you want to Remove this picture?</value>
  </data>
  <data name="DefaultDevelopedByHyperlink.Content" xml:space="preserve">
    <value>Developed by PandaSharp</value>
  </data>
  <data name="DefaultDevelopedByHyperlink.NavigateUri" xml:space="preserve">
    <value>http://www.yugenapps.com</value>
  </data>
  <data name="DefaultLaunch2020TextBlock.Text" xml:space="preserve">
    <value>Proudly part of Launch 2020</value>
  </data>
  <data name="DefaultNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="DefaultUwpCommunityHyperlink.Content" xml:space="preserve">
    <value>Click here to find more awesome new apps for Windows!</value>
  </data>
  <data name="DefaultUwpCommunityHyperlink.NavigateUri" xml:space="preserve">
    <value>https://uwpcommunity.com/</value>
  </data>
  <data name="DefaultYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="MainAddMasterTextBlock.Text" xml:space="preserve">
    <value>Click here to choose a Master image</value>
  </data>
  <data name="MainAddTilesFolderTextBlock.Text" xml:space="preserve">
    <value>Add Tiles from Folder</value>
  </data>
  <data name="MainAddTilesTextBlock.Text" xml:space="preserve">
    <value>Add Tiles</value>
  </data>
  <data name="MainGenerateTextBlock.Text" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="MainHeightTextBlock.Text" xml:space="preserve">
    <value>H:</value>
  </data>
  <data name="MainHelpTextBlock.ToolTipService.ToolTip" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="MainHelpTextBlock.AutomationProperties.Name" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="MainMasterImageTextBlock.Text" xml:space="preserve">
    <value>Master Image</value>
  </data>
  <data name="MainMosaicTypeTextBlock.Text" xml:space="preserve">
    <value>MosaicType</value>
  </data>
  <data name="MainOutputPropertiesTextBlock.Text" xml:space="preserve">
    <value>Output Properties</value>
  </data>
  <data name="MainResetTextBlock.Text" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="MainSaveAsTextTextBlock.Text" xml:space="preserve">
    <value>Save As Text</value>
  </data>
  <data name="MainSaveTextBlock.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="MainSettingsTextBlock.ToolTipService.ToolTip" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="MainSettingsTextBlock.AutomationProperties.Name" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="MainShowGridCheckBox.Content" xml:space="preserve">
    <value>Show Grid</value>
  </data>
  <data name="MainTeachingTip.ActionButtonContent" xml:space="preserve">
    <value>Skip Tutorial</value>
  </data>
  <data name="MainTeachingTip.CloseButtonContent" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="MainTileProperties.Text" xml:space="preserve">
    <value>Tile Properties</value>
  </data>
  <data name="MainTilesListTextBlock.Text" xml:space="preserve">
    <value>Tiles list</value>
  </data>
  <data name="MainTitleTextBlock.Text" xml:space="preserve">
    <value>Yugen Mosaic</value>
  </data>
  <data name="MainWhatsNewTextBlock.ToolTipService.ToolTip" xml:space="preserve">
    <value>What's New</value>
  </data>
  <data name="MainWhatsNewTextBlock.AutomationProperties.Name" xml:space="preserve">
    <value>What's New</value>
  </data>
  <data name="MainWidthTextBlock.Text" xml:space="preserve">
    <value>W:</value>
  </data>
  <data name="MosaicServiceErrorMasterImage" xml:space="preserve">
    <value>Master image is missing</value>
  </data>
  <data name="MosaicServiceErrorTiles" xml:space="preserve">
    <value>Tiles are missing</value>
  </data>
  <data name="OnboardingStageAddTilesDescription" xml:space="preserve">
    <value>Then add images. Yugen Mosaic will use them as tiles to build your mosaic. The more tiles you choose, the better result you will get!</value>
  </data>
  <data name="OnboardingStageAddTilesTitle" xml:space="preserve">
    <value>Create a list of tiles</value>
  </data>
  <data name="OnboardingStageGenerateDescription" xml:space="preserve">
    <value>Now here is where Yugen Mosaic works its magic. Once you set all parameters, click ‘Create’ to start. The processing time is dependent on your pc hardware and on the parameters you set!</value>
  </data>
  <data name="OnboardingStageGenerateTitle" xml:space="preserve">
    <value>Create the mosaic</value>
  </data>
  <data name="OnboardingStageMasterImageDescription" xml:space="preserve">
    <value>First, choose the master image you want to use as the matrix of the mosaic. Yugen Mosaic will create a mosaic as close as possible to this image.</value>
  </data>
  <data name="OnboardingStageMasterImageTitle" xml:space="preserve">
    <value>Select the master image</value>
  </data>
  <data name="OnboardingStageMosaicTypeDescription" xml:space="preserve">
    <value>Now choose the type of your mosaic:
- "Classic" to automatically choose the best fitting image to apply in every tile.
- "Random" to randomly choose images that have best possible fit. It is faster than Classic but less precise.
- "Adjust Hue" to insert all the tiles you choose, adapting the color to the master image.
- "Plain Color" to create a mosaic with plain colors based on the master image. (You do not need to provide any tiles)
- "Ascii Art" to create a beautiful reproduction of your image with text based visual art. (You do not need to provide any tiles)</value>
  </data>
  <data name="OnboardingStageMosaicTypeTitle" xml:space="preserve">
    <value>Set the mosaic type</value>
  </data>
  <data name="OnboardingStageOutputPropertiesDescription" xml:space="preserve">
    <value>Next choose the resolution of the final mosaic picture. This will determine your art’s height and width.</value>
  </data>
  <data name="OnboardingStageOutputPropertiesTitle" xml:space="preserve">
    <value>Set the mosaic parameters</value>
  </data>
  <data name="OnboardingStageSaveDescription" xml:space="preserve">
    <value>This is the last step, if you like the result, you can click and save the mosaic picture on your device.</value>
  </data>
  <data name="OnboardingStageSaveTitle" xml:space="preserve">
    <value>Save the mosaic</value>
  </data>
  <data name="OnboardingStageTilePropertiesDescription" xml:space="preserve">
    <value>Next you can optionally set the mosaic’s tiles’ parameters. Afer you have created your list of tiles by adding your images, you can set the size of every single tile. The smaller the size the more detail your mosaic will have!</value>
  </data>
  <data name="OnboardingStageTilePropertiesTitle" xml:space="preserve">
    <value>Set the tile properties</value>
  </data>
  <data name="Settings.Title" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsAboutTextBlock.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="SettingsAppNameTextBlock.Text" xml:space="preserve">
    <value>Yugen Mosaic</value>
  </data>
  <data name="SettingsIconHyperlink.Content" xml:space="preserve">
    <value>Icon Design By Yoshi</value>
  </data>
  <data name="SettingsIconHyperlink.NavigateUri" xml:space="preserve">
    <value>https://github.com/yoshiask</value>
  </data>
  <data name="SettingsRateHyperlink.Content" xml:space="preserve">
    <value>Rate and review</value>
  </data>
  <data name="SettingsThemeDarkTextBlock.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="SettingsThemeDefaultTextBlock.Content" xml:space="preserve">
    <value>System Default</value>
  </data>
  <data name="SettingsThemeLightTextBlock.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="SettingsThemeTextBlock.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="SettingsUIHyperlink.Content" xml:space="preserve">
    <value>UI Design By Leisvan</value>
  </data>
  <data name="SettingsUIHyperlink.NavigateUri" xml:space="preserve">
    <value>https://twitter.com/leisvanCT</value>
  </data>
  <data name="WhatsNew.Title" xml:space="preserve">
    <value>What's New</value>
  </data>
  <data name="WhatsNewBody" xml:space="preserve">
    <value>v1.4
- We added the option to save "Ascii Art" result as text file
- We squashed some bugs and made some performance improvements

v1.3
- We added a new mosaic type option "Ascii Art" for text based visual art. 
This graphic design technique will recreate your pictures with a set of printable characters pieced together.
- We squashed some bugs and made some performance improvements</value>
  </data>
</root>